# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform CI"

on:
  push:
    branches:
      - "feature/**"
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      id-token: "write"
    env:
      WORKING_DIRECTORY_1: gp-vending
      WORKING_DIRECTORY_2: sandbox-vending # Change this as per client name directory which ever you'are creating

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set Google Cloud credentials
        uses: "google-github-actions/auth@v2"
        with:
          service_account: "sb-test@sachinsoni.iam.gserviceaccount.com" # my-service-account@my-project.iam.gserviceaccount.com
          workload_identity_provider: "projects/1019578273090/locations/global/workloadIdentityPools/test-git/providers/testing-jit" 
          
      - name: Run Cleanup Script
        run: |
          chmod +x test.sh
          ./test.sh
        env:
          GITHUB_TOKEN: ${{ secrets.DEMO_CLEANUP }}

      - name: Terraform Init for WORKING_DIRECTORY_1
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY_1 }}

      - name: Terraform Init for WORKING_DIRECTORY_2
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      - name: Terraform Format for WORKING_DIRECTORY_1
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIRECTORY_1 }}

      - name: Terraform Format for WORKING_DIRECTORY_2
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      - name: Terraform Plan for WORKING_DIRECTORY_1
        run: terraform plan
        working-directory: ${{ env.WORKING_DIRECTORY_1 }}

      - name: Terraform Plan for WORKING_DIRECTORY_2
        run: terraform plan
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      - name: Terraform Apply for WORKING_DIRECTORY_1
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIRECTORY_1 }}

      - name: Terraform Apply for WORKING_DIRECTORY_2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}
