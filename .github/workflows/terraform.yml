name: "Terraform CI"

on:
  push:
    branches:
      - "feature/**"
      - main
  pull_request:
  
  repository_dispatch:
    types: 
      - trigger-gitops
jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      id-token: "write"
    env:
      WORKING_DIRECTORY_1: gp-vending
      WORKING_DIRECTORY_2: sandbox-vending
      GITHUB_TOKEN: ${{ secrets.DEMO_CLEANUP }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set Google Cloud credentials
        uses: "google-github-actions/auth@v2"
        with:
          service_account: "sb-test@sachinsoni.iam.gserviceaccount.com"
          workload_identity_provider: "projects/1019578273090/locations/global/workloadIdentityPools/test-git/providers/testing-jit"

      - name: Run Cleanup Script
        id: cleanup
        run: |
          chmod +x deletion_script.sh
          OUTPUT=$(./deletion_script.sh)
          echo "$OUTPUT"
          if [[ "$OUTPUT" == *"File deletion process completed. No files were deleted."* ]]; then
            echo "deletion_occurred=false" >> $GITHUB_ENV
          else
            echo "deletion_occurred=true" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.DEMO_CLEANUP }}

      # - name: Initialize Terraform for WORKING_DIRECTORY_1
      #   if: env.deletion_occurred == 'false'
      #   run: |
      #     echo "Initializing Terraform in directory: ${{ env.WORKING_DIRECTORY_1 }}"
      #     terraform init
      #   working-directory: ${{ env.WORKING_DIRECTORY_1 }}
        
      # - name: Format Terraform for WORKING_DIRECTORY_1
      #   if: env.deletion_occurred == 'false'
      #   run: |
      #     echo "Formatting Terraform in directory: ${{ env.WORKING_DIRECTORY_1 }}"
      #     terraform fmt -check
      #   working-directory: ${{ env.WORKING_DIRECTORY_1 }}
      
      # - name: Plan Terraform for WORKING_DIRECTORY_1
      #   if: env.deletion_occurred == 'false'
      #   run: |
      #     echo "Planning Terraform in directory: ${{ env.WORKING_DIRECTORY_1 }}"
      #     terraform plan
      #   working-directory: ${{ env.WORKING_DIRECTORY_1 }}
      
      # - name: Apply Terraform for WORKING_DIRECTORY_1
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.deletion_occurred == 'false'
      #   run: |
      #     echo "Applying Terraform in directory: ${{ env.WORKING_DIRECTORY_1 }}"
      #     terraform apply -auto-approve
      #   working-directory: ${{ env.WORKING_DIRECTORY_1 }}

      - name: Initialize Terraform for WORKING_DIRECTORY_2
        if: env.deletion_occurred == 'false'
        run: |
          echo "Initializing Terraform in directory: ${{ env.WORKING_DIRECTORY_2 }}"
          terraform init
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      
      - name: Format Terraform for WORKING_DIRECTORY_2
        if: env.deletion_occurred == 'false'
        run: |
          echo "Formatting Terraform in directory: ${{ env.WORKING_DIRECTORY_2 }}"
          terraform fmt -check
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      - name: Plan Terraform for WORKING_DIRECTORY_2
        if: env.deletion_occurred == 'false'
        run: |
          echo "Planning Terraform in directory: ${{ env.WORKING_DIRECTORY_2 }}"
          terraform plan
        working-directory: ${{ env.WORKING_DIRECTORY_2 }}

      # - name: Apply Terraform for WORKING_DIRECTORY_2
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' && env.deletion_occurred == 'false'
      #   run: |
      #     echo "Applying Terraform in directory: ${{ env.WORKING_DIRECTORY_2 }}"
      #     terraform apply -auto-approve
      #   working-directory: ${{ env.WORKING_DIRECTORY_2 }}
